# 11 Express.js: Note Taker

## App Summary

Your assignment is to modify starter code to create an application called Note Taker that can be used to write and save notes. This application will use an Express.js back end and will save and retrieve note data from a JSON file.

The application’s front end has already been created. It's your job to build the back end, connect the two, and then deploy the entire application to Heroku.


## Requirements

```
1.  GIVEN a note-taking application
2.  WHEN I open the Note Taker
3.  THEN I am presented with a landing page with a link to a notes page
4.  WHEN I click on the link to the notes page
5.  THEN I am presented with a page with existing notes listed in the left-hand column, plus empty fields to enter a new note title and the note’s text in   the right-hand column
7.  WHEN I enter a new note title and the note’s text
8.  THEN a Save icon appears in the navigation at the top of the page
9.  WHEN I click on the Save icon
10. THEN the new note I have entered is saved and appears in the left-hand column with the other existing notes
11. WHEN I click on an existing note in the list in the left-hand column
12. THEN that note appears in the right-hand column
13. WHEN I click on the Write icon in the navigation at the top of the page
14. THEN I am presented with empty fields to enter a new note title and the note’s text in the right-hand column
```

## Getting Started

On the back end, the application should include a `db.json` file that will be used to store and retrieve notes using the `fs` module.

The following HTML routes should be created:

* `GET /notes` should return the `notes.html` file.

* `GET *` should return the `index.html` file.

The following API routes should be created:

* `GET /api/notes` should read the `db.json` file and return all saved notes as JSON.

* `POST /api/notes` should receive a new note to save on the request body, add it to the `db.json` file, and then return the new note to the client. You'll need to find a way to give each note a unique id when it's saved (look into npm packages that could do this for you).


## Bonus

You haven’t learned how to handle DELETE requests, but this application offers that functionality on the front end. As a bonus, try to add the DELETE route to the application using the following guideline:

* `DELETE /api/notes/:id` should receive a query parameter that contains the id of a note to delete. To delete a note, you'll need to read all notes from the `db.json` file, remove the note with the given `id` property, and then rewrite the notes to the `db.json` file.

## Environment Installation and local directory structure
  
1. create a new github repository named 'expressNoteTaker'
2. launch microsoft visual studio Code app
3. enter cli:  cd ~/bootcamp/homework
4. enter cli:  git clone <repository> // creates expressNoteTaker directory
5. enter cli:  cd expressNoteTaker
6. enter cli:  npm init
7. enter cli:  npm install express
7. enter cli:  npm i inquirer@8.2.4  // install inquirer node.js code
8. enter cli:  npm i jest --dev-save // install jest node.js test code
9. enter cli:  install heroku
9. create the following directory structure:

	expressNoteTaker
	  .gitignore
	  package.json
	  server.js

	  db
	    db.json

	  public
	    index.html
	    notes.html
	    assets
	      css
		styles.css
	      js
		index.js



** Design

Express.js Backend

// Create a server.js file to build the Express.js backend.
// Set up Express and create routes for the following:
//GET /notes to serve the notes.html file.
//GET * (catch-all) to serve the index.html file.
//GET /api/notes to read the db.json file and return all saved notes as JSON.
//POST /api/notes to receive a new note in the request body, add it to the db.json file, and return the new note to the client. You'll need to generate a // unique ID for each note.
//(Bonus) DELETE /api/notes/:id to delete a note by its ID. This route should read all notes from db.json, remove the note with the given ID, and rewrite //the notes to the file.
//Database (db.json)

Create a db.json file in the db directory to store and retrieve notes.

Deployment to Heroku


1. Create Procfile in your project root directory which is used by Heroku to determine how to run your application. Procfile will include: 'web: node server.js'
2. 

## Operational Concept

### Adding a note

1. Running npm start launches the server.js file, which starts an Express.js server listening on port 3001.
2. When you access localhost:3001 in a web browser, the index.html home page is displayed, and the index.js file is executed.
3. Clicking the "Get Started" button on the home page navigates the user to localhost:3001/notes, where the notes.html page is displayed. The index.js program fetches JSON data from the server using the /api/notes route.
4. The contents of the /db/db.json file are retrieved from the server and rendered on the notes.html page.
5. When a user enters a new note title and note text and clicks the save button, a POST request is sent to the server at the /api/notes route.
6. The control is passed to the server.js program, which handles the POST request, writes the new note to the /db/db.json file, and responds to the client with the newly added note.

### Deleting a note

User Interaction: The user interacts with the web page by clicking the delete button associated with a specific note.

Event Handling (index.js): JavaScript code in the index.js file handles the click event on the delete button and initiates the process to delete the note.

API Request: When the delete button is clicked, JavaScript code sends an AJAX request (typically a DELETE request) to the server to delete the note. The request would be sent to a specific API route that handles note deletion.

Server Route (server.js): In your server.js file, you should have an API route to handle DELETE requests for deleting notes. It would look something like this:
app.delete('/api/notes/:id', (req, res) => {
  // Handle the DELETE request and delete the note with the specified ID.
});
Server-side Processing: In the server-side code, you would extract the note's ID from the request parameters (e.g., req.params.id) to identify which note needs to be deleted.

Database Interaction: You would interact with your data store (likely a JSON file, such as /db/db.json) to delete the note with the matching ID. This involves reading the existing notes, removing the specified note, and then writing the updated list of notes back to the JSON file.

Response: After successfully deleting the note from the database, you would typically respond to the client's DELETE request with a success status code (e.g., 204 No Content) or a success message.

Client-Side Update (index.js): Once the client receives a successful response from the server, the JavaScript code on the client side should update the user interface to reflect the deletion of the note. This may involve removing the note from the list of displayed notes.

User Feedback: Optionally, you can provide user feedback, such as displaying a message confirming the deletion of the note.

In summary, when the user clicks the delete button, it triggers a series of actions that involve client-side JavaScript sending a DELETE request to the server, the server handling the request, updating the data store, and responding to the client. Finally, the client-side JavaScript updates the user interface to reflect the deleted note.


