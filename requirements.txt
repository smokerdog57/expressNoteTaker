# 11 Express.js: Note Taker

## App Summary

Your assignment is to modify starter code to create an application called Note Taker that can be used to write and save notes. This application will use an Express.js back end and will save and retrieve note data from a JSON file.

The application’s front end has already been created. It's your job to build the back end, connect the two, and then deploy the entire application to Heroku.


## Requirements

```
1.  GIVEN a note-taking application
2.  WHEN I open the Note Taker
3.  THEN I am presented with a landing page with a link to a notes page
4.  WHEN I click on the link to the notes page
5.  THEN I am presented with a page with existing notes listed in the left-hand column, plus empty fields to enter a new note title and the note’s text in   the right-hand column
7.  WHEN I enter a new note title and the note’s text
8.  THEN a Save icon appears in the navigation at the top of the page
9.  WHEN I click on the Save icon
10. THEN the new note I have entered is saved and appears in the left-hand column with the other existing notes
11. WHEN I click on an existing note in the list in the left-hand column
12. THEN that note appears in the right-hand column
13. WHEN I click on the Write icon in the navigation at the top of the page
14. THEN I am presented with empty fields to enter a new note title and the note’s text in the right-hand column
```

## Getting Started

On the back end, the application should include a `db.json` file that will be used to store and retrieve notes using the `fs` module.

The following HTML routes should be created:

* `GET /notes` should return the `notes.html` file.

* `GET *` should return the `index.html` file.

The following API routes should be created:

* `GET /api/notes` should read the `db.json` file and return all saved notes as JSON.

* `POST /api/notes` should receive a new note to save on the request body, add it to the `db.json` file, and then return the new note to the client. You'll need to find a way to give each note a unique id when it's saved (look into npm packages that could do this for you).


## Bonus

You haven’t learned how to handle DELETE requests, but this application offers that functionality on the front end. As a bonus, try to add the DELETE route to the application using the following guideline:

* `DELETE /api/notes/:id` should receive a query parameter that contains the id of a note to delete. To delete a note, you'll need to read all notes from the `db.json` file, remove the note with the given `id` property, and then rewrite the notes to the `db.json` file.

## Environment Installation and local directory structure
  
1. create a new github repository named 'expressNoteTaker'
2. launch microsoft visual studio Code app
3. enter cli:  cd ~/bootcamp/homework
4. enter cli:  git clone <repository> // creates expressNoteTaker directory
5. enter cli:  cd expressNoteTaker
6. enter cli:  npm init
7. enter cli:  npm i inquirer@8.2.4  // install inquirer node.js code
8. enter cli:  npm i jest --dev-save // install jest node.js test code
9. enter cli:  install heroku
9. create the following directory structure:

	expressNoteTaker
	  .gitignore
	  package.json
	  server.js

	  db
	    db.json

	  public
	    index.html
	    notes.html
	    assets
	      css
		styles.css
	      js
		index.js




















